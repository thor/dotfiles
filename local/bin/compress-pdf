#!/bin/sh

# Inspired by http://www.alfredklomp.com/programming/shrinkpdf/

usage() {
  cat <<- EOF
	Usage: $1 INPUT_FILE [OUTPUT_FILE] [GHOSTSCRIPT ARGS]

	Reduces PDF filesize by lossy recompressing with Ghostscript.
	Not guaranteed to succeed, but usually works.
	EOF
}

shrink() {
  INFILE=$1
  OUTFILE=$2
  shift
  shift
  ARGS="$*"

  set -x
  /usr/bin/gs \
    -sDEVICE=pdfwrite \
    -dNOPAUSE -dQUIET -dBATCH -dSAFER \
    -dCompatibilityLevel=1.4 \
    -dPDFA=3 \
    -dPDFSETTINGS=/printer \
    -sOutputFile="$OUTFILE" \
    $ARGS \
    "$INFILE"
  set +x
}

check_smaller() {
  # If $1 and $2 are regular files, we can compare file sizes to
  # see if we succeeded in shrinking. If not, we copy $1 over $2:
  if [ ! -f "$1" ] || [ ! -f "$2" ]; then
    return 0
  fi
  ISIZE="$(wc -c "$1" | cut -f1 -d\ )"
  OSIZE="$(wc -c "$2" | cut -f1 -d\ )"
  if [ "$ISIZE" -lt "$OSIZE" ]; then
    echo "Input smaller than output, doing straight copy" >&2
    cp "$1" "$2"
  fi
}

INFILE=$1

# Need an input file:
if [ -z "$INFILE" ]; then
  usage "$0"
  exit 1
fi

# Shift first parameter
shift

if [ -n "$1" ]; then
  OUTFILE="$1"
  # Shift second parameter
  shift
else
  OUTFILE="-"
fi

shrink "$INFILE" "$OUTFILE" "${@}"

check_smaller "$INFILE" "$OUTFILE"
